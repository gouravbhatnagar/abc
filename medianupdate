import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Solution{
    
    Integer[] leftMaxHeap = new Integer[50001];
    Integer[] rightMinHeap = new Integer[50001];
    
    Integer leftIndex = -1;
    Integer rightIndex = -1;
    
    static void reAdjustHeaps(){
        
        if(rightIndex > leftIndex){
            
            Integer firstElement = rightMinHeap[0]; 
            
            rightMinHeap[0] = rightMinHeap[rightIndex];
            rightMinHeap[rightIndex--] = null;
            percolateDown(rightMinHeap, 0, "min");
            
            leftMaxHeap[++leftIndex] = firstElement;
            percolateUp(leftMaxHeap, "max");
            
        }else if(leftIndex - rightIndex == 2){
        
            Integer firstElement = leftMaxHeap[0];
            
            leftMaxHeap[0] = leftMaxHeap[leftIndex];
            leftMaxHeap[leftIndex--] = null;
            percolateDown(leftMaxHeap, 0, "max");
            
            rightMinHeap[++rightIndex] = firstElement;
            percolateUp(rightMinHeap, "min");        
            
        }
    
    }
    
    static void percolateUp(Integer[] heap, String type){
        
        Integer lastIndex = -1;
        
        if(type.equals("min")){
            lastIndex = rightIndex;    
        }else{
            lastIndex = leftIndex;    
        }
        
        for(Integer i = (lastIndex-1)/2 ; i>=0 ; i--){
            
            if(type.equals("min")){
                
                if(heap[(i-1)/2]>heap[i]){
                    
                    Integer root = heap[(i-1)/2];
                    heap[(i-1)/2] = heap[i];
                    heap[i] = root;
                
                }   
                
            }else{
                
                if(heap[(i-1)/2]<heap[i]){
                    
                    Integer root = heap[(i-1)/2];
                    heap[(i-1)/2] = heap[i];
                    heap[i] = root;
                
                }  
                
            }    
        
        }
        
    }
    
    static void percolateDown(Integer[] heap, Integer index, String type){
        
        Integer[] queue = new Integer[50001];
        Integer queueInIndex = -1;
        Integer queueOutIndex = -1;
        Integer heapIndex = -1;
        
        if(index != null){
            heapIndex = index;    
        }
        
        queue[++queueInIndex ] = heap[++heapIndex];
        ++queueOutIndex;
        
        if(type.equals("max")){
            
            while(queue[queueOutIndex] != null){
            
                Integer root = queue[queueOutIndex];
                Integer left = heap[2*queueOutIndex+1];
                Integer right = heap[2*queueOutIndex+2];

                if(left>right){
                    if(root<left){
                        heap[2*queueOutIndex+1] = root;
                        heap[queueOutIndex] = left;
                    }    
                }else if(right>left){
                    if(root<right){
                        heap[2*queueOutIndex+2] = root;
                        heap[queueOutIndex] = right;
                    }    
                }else{
                    heap[2*queueOutIndex+1] = root;
                    heap[queueOutIndex] = left;    
                }
                queue[++queueInIndex] = heap[2*queueOutIndex+1];
                queue[++queueInIndex] = heap[2*queueOutIndex+2];
                queueOutIndex++;
            }
            
        }else{
            
            while(queue[queueOutIndex] != null){
            
                Integer root = queue[queueOutIndex];
                Integer left = heap[2*queueOutIndex+1];
                Integer right = heap[2*queueOutIndex+2];

                if(left<right){
                    if(root>left){
                        heap[2*queueOutIndex+1] = root;
                        heap[queueOutIndex] = left;
                    }    
                }else if(right<left){
                    if(root>right){
                        heap[2*queueOutIndex+2] = root;
                        heap[queueOutIndex] = right;
                    }    
                }else{
                    heap[2*queueOutIndex+1] = root;
                    heap[queueOutIndex] = left;    
                }
                queue[++queueInIndex] = heap[2*queueOutIndex+1];
                queue[++queueInIndex] = heap[2*queueOutIndex+2];
                queueOutIndex++;
            }    
            
        }
        
    }
    
    static void addToHeap(Integer value){
        
        Integer[] chosenHeap = null;
        Integer chosenHeapIndex = null;
        String type = null;
        
        if(leftIndex+1 == 0){
            
            chosenHeap = leftMaxHeap;
            chosenHeapIndex = leftIndex;
            type = "max";
            
        }else if(value =< leftMaxHeap[leftIndex]){
            
            chosenHeap = leftMaxHeap;
            chosenHeapIndex = leftIndex;
            type = "max";
            
        }else if(value >= rightMinHeap[rightIndex]){
            
            chosenHeap = rightMinHeap;
            chosenHeapIndex = rightIndex;
            type = "min";
            
        }else{
            
            chosenHeap = leftMaxHeap;
            chosenHeapIndex = leftIndex;
            type = "max";
            
        }
        
        chosenHeap[++chosenHeapIndex] = value;
        percolateUp(chosenHeap);
        
        reAdjustHeaps();
    }
    
    static void removeFromHeap(Integer value){
        
        Integer[] chosenHeap = null;
        Integer chosenHeapIndex = null;
        String type = null;
        
        if(leftIndex+1 != 0){
            
            if(value =< leftMaxHeap[leftIndex]){

                chosenHeap = leftMaxHeap;
                chosenHeapIndex = leftIndex;
                type = "max";

            }else if(value >= rightMinHeap[rightIndex]){

                chosenHeap = rightMinHeap;
                chosenHeapIndex = rightIndex;
                type = "min";
                
            } 
            
            Integer index = searchInHeap(value);
            chosenHeap[index] = chosenHeap[chosenHeapIndex];
            chosenHeapIndex--;
            percolateDown(chosenHeap, index, type);
        }
        
        reAdjustHeaps();
    }
    
    static void transformHeap(Character operation, Integer value){
    
       if(operation == 'r'){
                
            removeFromHeap(value);
       }        
       else if(operation == 'a'){
                
            addToHeap(value);
                    
       }    
       
    }
    
    /* Head ends here*/
    static void median(String a[],int x[]) {
        
       
    }
    
    /* Tail starts here*/
    
   public static void main( String args[] ){
      

      Scanner in = new Scanner(System.in);
      
      int N;
      N = in.nextInt();
   
      String s[] = new String[N];
      int x[] = new int[N];
      
      for(int i=0; i<N; i++){
         s[i] = in.next();
         x[i] = in.nextInt();
      }
   
      median(s,x);
    }
}
